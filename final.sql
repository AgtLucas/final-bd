DROP TABLE CONEXOES;
DROP TABLE CAMINHOS;
DROP TABLE FILA;

--- Table Fila
CREATE TABLE FILA (
  ORDEM NUMBER(15),
  ELEMENTO VARCHAR(10)
);

--- Table Caminhos
CREATE TABLE CAMINHOS(
  CAMINHOS VARCHAR(10),
  CUSTO NUMBER(15, 4)
);

--- Table Conexoes
CREATE TABLE CONEXOES(
  ORIGEM VARCHAR(10),
  DESTINO VARCHAR(10),
  CUSTO NUMBER(15, 4)
);

--- Table Rotas
CREATE TABLE ROTAS (
  NR_NOTAFISCAL VARCHAR (20),
  CD_CLIENTE VARCHAR(5),
  DESTINO VARCHAR(2),
  ROTA1 VARCHAR(11),
  CUSTO1 NUMBER(15,4),
  ROTA2 VARCHAR(11),
  CUSTO2 NUMBER(15,4),
  CONSTRAINT FK_ROTAS_NF FOREIGN KEY(NR_NOTAFISCAL) REFERENCES PRNOTAFISCAL,
  CONSTRAINT FK_ROTAS_CLIENTE FOREIGN KEY(CD_CLIENTE) REFERENCES PRCLIENTE
);

--- Function nelementosfila
CREATE OR REPLACE FUNCTION nelementosfila RETURN NUMBER
  AS VALOR NUMBER;
BEGIN
  SELECT COUNT(ORDEM) INTO VALOR
    FROM FILA;
  RETURN VALOR;
END;

--- Procedure limpafila
CREATE OR REPLACE PROCEDURE limpafila
  AS
BEGIN
  DELETE FROM FILA;
END;

--- Procedure retirafila
CREATE OR REPLACE PROCEDURE retirafila (PAR_ELEMENTO VARCHAR)
  AS
BEGIN
  DELETE FROM FILA WHERE ELEMENTO = PAR_ELEMENTO;
END;

--- Procedure inserefila
CREATE OR REPLACE PROCEDURE INSEREFILA(ELEM VARCHAR) AS
  MAIOR NUMBER(15);
BEGIN
-- obtem o maior valor da ordem na tabela fila
  SELECT MAX(ORDEM) INTO MAIOR FROM FILA;
-- verifica se é nulo = fila vazia;
    IF MAIOR IS NULL THEN
      MAIOR := 0;
    END IF;
-- incrementa a variável que conterá a ordem do novo elemento
  MAIOR := MAIOR + 1;
-- insere o novo elemento na tabela fila;
  INSERT INTO FILA VALUES (MAIOR, ELEM);
END INSEREFILA;

--- Calcula caminhos
CREATE OR REPLACE PROCEDURE CALCULACAMINHOS AS
  ORIGEM VARCHAR(1);
  ELEM VARCHAR(50);
  VAR NUMBER(15);
  CUSTO NUMBER(15);
  WTF NUMBER(15);
  WTF2 NUMBER(15);
  WTF3 VARCHAR(50);
BEGIN
  LIMPAFILA;
  ORIGEM := 'A';
  INSEREFILA (ORIGEM);
  WHILE NELEMENTOSFILA > 0 LOOP
    ELEM := RETIRAFILA();
  FOR CONN IN (SELECT * FROM CONEXOES WHERE ORIGEM = ELEM) LOOP
    SELECT COUNT(*) INTO VAR FROM CAMINHOS WHERE SUBSTR(CAMINHOS.CAMINHOS, -1) = ELEM;

      IF VAR > 0 THEN
        FOR CAM IN (SELECT * FROM CAMINHOS WHERE SUBSTR(CAMINHOS.CAMINHOS, -1) = ELEM) LOOP
          WTF3 := CAM.CAMINHOS || CONN.DESTINO;
            SELECT COUNT(*) INTO WTF FROM CAMINHOS WHERE CAMINHOS = WTF3;
          IF WTF = 0 THEN
            INSERT INTO CAMINHOS VALUES(CAM.CAMINHOS || CONN.DESTINO, CAM.CUSTO + CONN.CUSTO);
          END IF;
        END LOOP;
      ELSE
        INSERT INTO CAMINHOS VALUES(CONN.ORIGEM||CONN.DESTINO, CONN.CUSTO);
      END IF;
      INSEREFILA(CONN.DESTINO);
  END LOOP;
END LOOP;
END CALCULACAMINHOS;

--- Insere Rotas
INSERT INTO ROTAS (NR_NOTAFISCAL, CD_CLIENTE, DESTINO) SELECT PRNOTAFISCAL.NR_NOTAFISCAL, PRNOTAFISCAL.CD_CLIENTE, PRMUNICIPIO.DESTINO
FROM PRNOTAFISCAL JOIN PRCLIENTE
ON PRCLIENTE.CD_CLIENTE = PRNOTAFISCAL.CD_CLIENTE
JOIN PRMUNICIPIO
ON PRMUNICIPIO.CD_MUNICIPIO = PRCLIENTE.CD_MUNICIPIO;

--- Insere Rotas
CREATE OR REPLACE PROCEDURE INSEREROTAS
  AS
    CDCAM VARCHAR(50);
    VALORCAM NUMBER(10, 2);
    PRIMEIRO BOOLEAN;
    CURSOR MELHORCAM(PARADEST VARCHAR) IS
    SELECT * FROM (
      SELECT * FROM CAMINHOS
      WHERE SUBSTR(CAMINHOS, -1) = PARADEST
      ORDER BY CUSTO )
    WHERE ROWNUM <=2;
BEGIN
  FOR CONN IN (SELECT * FROM ROTAS) LOOP
    PRIMEIRO := TRUE;
  FOR MCAML IN MELHORCAM(CONN.DESTINO) LOOP
    IF PRIMEIRO THEN
      UPDATE ROTAS SET ROTA1 = MCAML.CAMINHO WHERE NR_NOTAFISCAL = CONN.NR_NOTAFISCAL;
      UPDATE ROTAS SET CUSTO1 = MCAML.CUSTO WHERE NR_NOTAFISCAL = CONN.NR_NOTAFISCAL;
    PRIMEIRO := FALSE;
    ELSE
      UPDATE NRCAMINHOS SET ROTA2 = MCAML.CAMINHO WHERE NR_NF = CONN.NR_NOTAFISCAL;
      UPDATE NRCAMINHOS SET CUSTO2 = MCAML.CUSTO WHERE NR_NF = CONN.NR_NOTAFISCAL;
    END IF;
  END LOOP;
END LOOP;
END;

--- xml
SELECT dbms_xmlgen.getxmltype('SELECT * FROM ROTAS') FROM DUAL;
